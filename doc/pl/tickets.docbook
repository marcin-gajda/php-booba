<?xml version="1.0" encoding="iso-8859-2"?>
<chapter id="ticketsChapter">
	<title>System ticketów</title>
	<section>
		<title>Wprowadzenie</title>
		<para>
			Ten rozdzia³ opisuje u¿yty w systemie
			<productname>php-Booba</productname> system tzw. ticketów.
		</para>
	</section>
	<section>
		<title>Czym jest ticket?</title>
		<para>
			Jednym z najczê¶ciej pope³nianych przez programistów aplikacji WWW
			jest b³±d polegaj±cy na umieszczaniu nadmiarowych informacji w
			linkach lub formularzach, których przes³anie przez u¿ytkownika
			generuje jak±¶ akcjê zale¿n± od uprawnieñ tego u¿ytkownika.
		</para>
		<para>
			Dla przyk³adu, poni¿ej przedstawiony zosta³ fragment kodu HTML
			pewnej aplikacji WWW, odpowiedzialny za umo¿liwienie u¿ytkownikowi
			usuwanie produktów z bazy danych.
		</para>
		<screen>
			Sepulka z kacie¿± zielona &lt;a href="usun.php?id=123"&gt;usuñ&lt;/a&gt;&lt;br&gt;
			Sepulka z kacie¿± czerwona &lt;a href="usun.php?id=154"&gt;usuñ&lt;/a&gt;&lt;br&gt;
			Sepulka z kacie¿± bia³a &lt;a href="usun.php?id=21"&gt;usuñ&lt;/a&gt;&lt;br&gt;
			Sepulka z kacie¿± zwyk³a &lt;a href="usun.php?id=432"&gt;usuñ&lt;/a&gt;
		</screen>
		<para>
			Oczywi¶cie nie s± to wszystkie produkty dostêpne w systemie, jednak
			u¿ytkownik pracuj±cy w tej w chwili w systemie powinien mieæ
			mo¿liwo¶æ usuniêcia jedynie tych produktów.
		</para>
		<para>
			Umo¿liwienie klikniêcia u¿ytkownikowi w link, w którym zapisany
			jest wprost rodzaj ¿±dania (w typ przypadku nazwa pliku
			<filename>usun.php</filename> oraz wiele mówi±ca nazwa pola
			<emphasis>id</emphasis> w sposób jednoznaczny zdradzaj± intencje
			programisty) powoduj± konieczno¶æ sprawdzenia po stronie aplikacji,
			po odebraniu ¿±dania, czy rzeczywi¶cie dany u¿ytkownik posiada
			uprawnienia umo¿liwiaj±ce mu na usuniêcie danego produktu (nic
			przecie¿ nie stoi na przeszkodzie, aby z³o¶liwy u¿ytkownik wpisa³
			bezpo¶rednio URL z id produktu, do którego nie posiada uprawnieñ).
			Niestety programi¶ci czêsto zapominaj± o tym sprawdzeniu, czasem
			zdarza siê im te¿ po prostu zrobiæ b³±d w funkcji odpowiedzialnej
			za sprawdzenie uprawnieñ.
		</para>
		<para>
			Prostym rozwi±zaniem, rozwi±zuj±cym problem sprawdzania uprawnieñ
			u¿ytkownika co ¿±danie jest pamiêtanie po stronie serwera listy
			akcji, na które w danej chwili aplikacja pozwala u¿ytkownikowi.
			Nadchodz±ce ¿±danie przed przetworzeniem powinno zostaæ najpierw
			sprawdzone, czy zosta³o uprzednio zarejestrowane.
		</para>
		<para>
			W podanym powy¿ej przyk³adzie wystarczy przechowaæ w sesji
			nastêpuj±c± tablicê:
		</para>
		<screen>
			array(
				array( 'action' => 'usun' , 'id' => 21 ) ,
				array( 'action' => 'usun' , 'id' => 123 ) ,
				array( 'action' => 'usun' , 'id' => 154 ) ,
				array( 'action' => 'usun' , 'id' => 432 )
			)
		</screen>
		<para>
			W takim przypadku, po nadej¶ciu ¿±dania
			<emphasis>usun.php?id=123</emphasis> system mo¿e szybko upewniæ
			siê, i¿ mo¿liwo¶æ wys³ania takiego ¿±dania zosta³a rzeczywi¶cie
			przedstawiona u¿ytkownikowi, tak wiêc na pewno posiada on
			uprawnienia do usuniêcia wybranego produktu. Nadej¶cie ¿±dania z
			<emphasis>id</emphasis> niewystêpuj±cym na li¶cie powinno skutkowaæ
			informacj± o b³êdzie, np.:
		</para>
		<screen>
			Usuwanie produktu - brak uprawnieñ!
		</screen>
		<important>
			<para>
				Uwaga: ze wzglêdów bezpieczeñstwa nie nale¿y sprawdzaæ, czy
				podany przez z³o¶liwego u¿ytkownika produkt rzeczywi¶cie
				istnieje w bazie i uzale¿niaæ od tego komunikatu b³êdu! Takie
				postêpowanie zwiêksza ilo¶æ informacji w³amywacza.
			</para>
		</important>
		<para>
			Paranoiczny twórca aplikacji WWW, jakim powinien byæ ka¿dy
			u¿ytkownik systemu <productname>php-Booba</productname> powinien
			mimo wszystko niechêtnie spogl±daæ na linki pozostawiaj±ce
			u¿ytkownikowi zbyt du¿± swobodê w manipulacji danymi przesy³anymi
			do przegl±darki. W opisywanym wy¿ej przypadku u¿ytkownik aplikacji
			nabywa niepotrzebn± mu wiedzê, i¿ usuwanie produktów nastêpuje
			poprzez plik <filename>usun.php</filename> oraz podanie
			wewnêtrznego identyfikatora produktu, który jest najprawdopodobniej
			liczb± naturaln±.
		</para>
		<para>
			Wiedza taka nie jest potrzebna u¿ytkownikowi aplikacji, a zwiêksza
			niebezpiecznie mo¿liwo¶ci w³amywacza czyhaj±cego na ka¿d± pomy³kê
			programisty. Poni¿szy przyk³ad ukazuje inne, bezpieczniejsze
			podej¶cie do generowanych u¿ytkownikowi ¿±dañ:
		</para>
		<screen>
			Sepulka z kacie¿± zielona &lt;a href="index.php?tid=ewrr32"&gt;usuñ&lt;/a&gt;&lt;br&gt;
			Sepulka z kacie¿± czerwona &lt;a href="index.php?tid=43jkfg"&gt;usuñ&lt;/a&gt;&lt;br&gt;
			Sepulka z kacie¿± bia³a &lt;a href="index.php?tid=dsf9er0"&gt;usuñ&lt;/a&gt;&lt;br&gt;
			Sepulka z kacie¿± zwyk³a &lt;a href="index.php?tid=fsd0fsd"&gt;usuñ&lt;/a&gt;
		</screen>
		<para>
			oraz odpowiadaj±c± temu przyk³adowi tablicê przechowywan± w sesji:
		</para>
		<screen>
			array(
				'ewrr32' =>
					array( 'action' => 'usun' , 'id' => 21 ) ,
				'43jkfg' =>
					array( 'action' => 'usun' , 'id' => 123 ) ,
				'dsf9er0' =>
					array( 'action' => 'usun' , 'id' => 154 ) ,
				'fsd0fsd' =>
					array( 'action' => 'usun' , 'id' => 432 )
			)
		</screen>
		<para>
			¯±dania przedstawione u¿ytkownikowi s± dla niego jedynie bez³adnym
			zbitkiem liter i cyfr, natomiast aplikacja posiada pe³n± informacj±
			o rodzaju skojarzonej z tym ci±giem znaków akcji. W celu
			zwiêkszenia poziomu bezpieczeñstwa, aplikacja nie powinna
			dwukrotnie przedstawiaæ u¿ytkownikowi ¿±dania z tym samym ci±giem
			znaków (nawet tego samego), a tablica ¿±dañ, przechowywana po
			stronie serwera, powinna byæ z ka¿dym ¿±daniem czyszczona i
			wype³niana nowymi akcjami od pocz±tku.
		</para>
		<para>
			Na tym w³a¶nie polega u¿yty w systemie
			<productname>php-Booba</productname> system ticketów. Jest to klasa
			odpowiadaj±ca za przechowywanie tworzonych przez u¿ytkownika
			skojarzeñ ci±gów znaków i cyfr z akcjami, które powinny zostaæ
			podjête przez system po nadej¶ciu zwi±zanych z tymi ci±gami ¿±dañ.
			System <productname>php-Booba</productname> zosta³ ponadto
			rozwiniêty w sposób umo¿liwiaj±cy automatyczne uruchamianie
			skojarzonych z tymi ci±gami akcji.
		</para>
		<para>
			W literaturze po¶wiêconej zagadnieniu ticketów, opisane przed chwil±
			ci±gi liter znaków i cyfr nazywane s± w³a¶nie ticketami, ze wzglêdu
			na lu¼ne skojarzenie ci±gu z biletem, którego przedstawienie
			umo¿liwia kontynuacjê podró¿y, któr± jest w tym przypadku dalsza
			praca z serwisem.
		</para>
	</section>
	<section>
		<title>Tworzenie ticketu</title>
		<para>
			Tickety w systemie <productname>php-Booba</productname>
			przechowywane s± w sesji. Za przetwarzanie tych danych
			odpowiedzialny jest obiekt klasy
			<emphasis>TicketService</emphasis>. Programista korzystaj±cy z
			systemu <productname>php-Booba</productname> nie powinien
			samodzielnie modyfikowaæ przechowywanych w sesji ticketów.
		</para>
		<para>
			System <productname>php-Booba</productname> podczas wykonywania
			skryptu <productname>PHP</productname> przechowuje globalny obiekt
			umo¿liwiaj±cy pracê z ticketami. Dostêp do tego obiektu uzyskuje
			siê poprzez wywo³anie funkcji <emphasis>getTickets()</emphasis>.
		</para>
		<screen>
			$tickets = &amp;getTickets();
		</screen>
		<important>
			<screen>
				Przy pobieraniu obiektu umo¿liwiaj±cego pracê z obiektami
				nale¿y koniecznie pobraæ wynik funkcji przez referencjê, gdy¿
				tickety zapamiêtane w obiekcie zapisywane s± w sesji dopiero
				podczas koñczenia siê wykonywania skryptu. Do tego czasu
				przechowywane s± one w globalnym obiekcie zwracanym przez
				funkcjê <emphasis>getTickets()</emphasis>.
			</screen>
		</important>
		<para>
			Klasa <emphasis>TicketService</emphasis> definiuje wiele funkcji,
			lecz wiêkszo¶æ z nich u¿ywana jest jedynie przez silnik systemu
			<productname>php-Booba</productname>. Programista powinien
			korzystaæ jedynie z funkcji umo¿liwiaj±cych zdefiniowanie nowego
			ticketu. Takie funkcje s± dwie, jedna z nich pozwala programi¶cie
			na samodzielne podanie ci±gu znaków definiuj±cego ticket, druga
			sama tworzy taki ci±g.
		</para>
		<para>
			Do zdefiniowania ticketu bez podawania ci±gu znaków definiuj±cego
			ticket s³u¿y metoda klasy TicketService o nazwie
			<emphasis>addTicket</emphasis>.
		</para>
		<screen>
			class TicketService
			{
				...

				function addTicket( $valuesToStore , $group = NULL )
				{
					...
				}
			}
		</screen>
		<note>
			<para>
				Parametr <emphasis>$group</emphasis> jest opcjonalny i zostanie
				szerzej omówiony w sekcji dotycz±cej grup ticketów. Na teraz,
				mo¿na przyj±æ, i¿ mo¿e on zostaæ pominiêty.
			</para>
		</note>
		<para>
			Parameter <emphasis>$valuesToStore</emphasis> musi byæ tablic±
			asocjacyjn± definiuj±c± warto¶ci cechuj±ce akcjê skojarzon± z
			ticketem.
		</para>
		<important>
			<para>
				System <productname>php-Booba</productname> rezerwuje kilka
				kluczy podawanej w pierwszym parametrze funkcji
				<emphasis>addTicket()</emphasis> tablicy asocjacyjnej dla
				swoich w³asnych potrzeb i nie powinny one byæ u¿ywane w innym
				celu.
			</para>
			<para>
				Najwa¿niejszym z tych kluczy jest <emphasis>page</emphasis>.
				Skojarzona z tym kluczem warto¶æ definiuje nazwê podklasy
				<emphasis>Page</emphasis>, która zostanie u¿yta do
				przetworzenia ¿±dania zwi±zanego z ticketem.
			</para>
			<para>
				Zastrze¿onym kluczem jest te¿
				<emphasis>ticket_group</emphasis>.  Wykorzystanie tego klucza
				zosta³o szerzej opisane w sekcji dotycz±cej grup ticketów.
			</para>
		</important>
		<para>
			Funkcja <emphasis>addTicket()</emphasis> zwraca ci±g znaków
			definiuj±cy ticket.  Mo¿e on zostaæ u¿yty na wyrenderowanej stronie
			HTML.
		</para>
		<screen>
			$tid = $tickets->addTicket(
				array(
					'page' => 'usun' ,
					'id' => 123 ) );

			$template->set_var( 'tid' , $tid' );

			$template->fetch( 'usun_produkt.tpl' );
		</screen>
		<para>
			Funkcja <emphasis>addExplicitTicket()</emphasis> umo¿liwia wybranie
			przez programistê ci±gu znaków definiuj±cego ticket.
		</para>
		<screen>
			class TicketService
			{
				...

				function addExplicitTicket( $tid , $valuesToStore , $group = NULL )
				{
					...
				}
			}
		</screen>
		<para>
			Funkcja <emphasis>addExplicitTicket()</emphasis> nie zwraca
			warto¶ci.
		</para>
	</section>
	<section>
		<title>Tickety statyczne</title>
		<para></para>
	</section>
	<section>
		<title>Grupy ticketów</title>
		<para></para>
	</section>
</chapter>
